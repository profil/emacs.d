#+TITLE: Emacs Configuration

* Interface

Disable some parts of the UI.

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (blink-cursor-mode -1)
#+END_SRC

Change some of the defaults.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t
        initial-scratch-message nil
        make-backup-files nil
        select-enable-clipboard t
        select-enable-primary t
        indent-tabs-mode nil)

  ;; prefer vertical splits if there is enough space
  (setq split-height-threshold nil
        split-width-threshold 160)

  ;; UTF-8
  (prefer-coding-system 'utf-8)

  ;; and tell emacs to play nice with encoding
  (define-coding-system-alias 'UTF-8 'utf-8)
  (define-coding-system-alias 'utf8 'utf-8)

  ;; delete trailing whitespace in all modes
  (add-hook 'before-save-hook #'delete-trailing-whitespace)

  ;; Enable S-{left, right, up, down} to switch window focus
  (windmove-default-keybindings)
  ;; Make windmove work in org-mode:
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right)
#+END_SRC

Change the behaviour of scrolling.

#+BEGIN_SRC emacs-lisp
  (setq scroll-preserve-screen-position t ;;keep cursor at same position when scrolling
        mouse-wheel-scroll-amount '(1 ((shift) . 1)) ;; one line at a time
        mouse-wheel-progressive-speed nil ;; don't accelerate scrolling
        mouse-wheel-follow-mouse 't ;; scroll window under mouse
        scroll-step 1 ;; keyboard scroll one line at a time
        scroll-conservatively 10000
        scroll-margin 3)
#+END_SRC

** Fonts

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Share Tech Mono-11"))
  (set-face-attribute 'default nil :font "Share Tech Mono-11")
#+END_SRC

** Customize

Put all the customize settings into its own file.

#+BEGIN_SRC emacs-lisp
  (setq custom-file
        (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file 'noerror)
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
  (use-package nord-theme
    :ensure t
    :config (load-theme 'nord t))
#+END_SRC

** Parentheses

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

** Darkroom

#+BEGIN_SRC emacs-lisp
  (use-package darkroom
    :ensure t)
#+END_SRC

* Evil

#+BEGIN_SRC emacs-lisp
  (use-package general
    :ensure t
    :config
    (general-evil-setup)
    (general-create-definer my-leader-def
      :states '(normal motion visual)
      :keymaps 'override
      :prefix "SPC")
    (my-leader-def
      "SPC" 'execute-extended-command
      "b" 'ivy-switch-buffer
      "ff" 'find-file
      "cd" 'cd
      "n" 'flymake-goto-next-error
      "p" 'flymake-goto-prev-error))

  (use-package evil
    :ensure t
    :init
    (setq evil-want-C-u-scroll t)
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-redo)
    :config (progn
	      (evil-mode 1)
	      (defalias #'forward-evil-word #'forward-evil-symbol)))

  (use-package evil-collection
    :ensure t
    :after evil
    :config (evil-collection-init))

  (use-package evil-org
    :ensure t
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme))))
#+END_SRC

* Editing

** Git

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-c m" . magit-status)))
#+END_SRC

** Projects

#+BEGIN_SRC emacs-lisp
  (use-package project
    :bind ("C-x f" . project-find-file))
#+END_SRC

** Search

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . swiper))
#+END_SRC

** Completion and filtering

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-idle-delay 0.0
	  company-minimum-prefix-length 1))

  (use-package flycheck
    :ensure t
    :hook (prog-mode . flycheck-mode))

  (use-package lsp-mode
    :ensure t
    :commands lsp
    :hook (prog-mode . lsp)
    :init (setq lsp-keymap-prefix "C-c l"))

  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode)
  (use-package lsp-ivy
    :ensure t
    :commands lsp-ivy-workspace-symbol)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind ("M-x" . counsel-M-x))

  (use-package ivy
    :ensure t
    :init (setq ivy-use-virtual-buffers t
                  ivy-height 10
                  ivy-count-format "(%d/%d) "
                  ivy-use-selectable-prompt t)
    :bind (("C-c C-r" . ivy-resume)
           :map ivy-minibuffer-map ("RET" . ivy-alt-done))
    :config (ivy-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t)

  (use-package ivy-hydra
    :ensure t)
#+END_SRC

* Languages

Support for different programming languages.

** Rust
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t)
#+END_SRC

** Elixir

#+BEGIN_SRC emacs-lisp
  (use-package elixir-mode
    :ensure t)

  (use-package alchemist
    :ensure t
    :config (setq alchemist-mix-test-default-options "--no-start"))
#+END_SRC

** Org

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :init (setq org-agenda-window-setup 'current-window
                org-src-fontify-natively t
                org-src-tab-acts-natively t
                org-src-window-setup 'current-window
                org-agenda-files '("~/org/gtd.org")))
#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode)))
#+END_SRC

** Web

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode ("\\.html?\\'" "\\.svelte\\'")
    :config (setq web-mode-markup-indent-offset 2
                  web-mode-code-indent-offset 2
                  web-mode-css-indent-offset 2))
#+END_SRC

** LaTeX

#+BEGIN_SRC emacs-lisp
  (use-package tex-site
    :ensure auctex
    :config (setq TeX-PDF-mode t
                  ;TeX-command-force "LaTeX"
                  TeX-view-program-list '(("PDF Viewer" "zathura %o"))))
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp
  (use-package python-black
    :ensure t
    :demand t
    :after python
    :hook (python-mode . python-black-on-save-mode))
#+END_SRC
